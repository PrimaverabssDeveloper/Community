<?xml version="1.0" encoding="utf-8" ?>

<!-- 
  This is the main topic element. Each topic must contain one
	   Id: This element identifies the topic and is contained in bot artifacts throughout the application
	   Importance: This element identifies the topic importance which is one of the items that factors the message priority. Values are 0, 1 and 2 from low to high importance
-->
<Topic Id="DevelopersNetworkTopic" Importance="1">	
	
	<!-- The tasks list contains all tasks that this topic implements.-->
	<Tasks>
    
		<!-- The task element contains all the information about a task
				 Id: This element identifies the task and is contained in bot artifacts throughout the application
				 pipelineId: This element identifies which pipeline from the integration config implements the task execution.
		-->
		<Task Id="GenerateTemplateMessages" pipelineId="DevelopersNetworkTopicPipeline">
			
			<!-- The schedule element contains all the information about the schedulling of a task
				Execute: This element identifies the time unit for task execution. Values are Daily, Monthly, Weekly. Execution takes place ONCE every time unit.
				StartAt: The start hour, month day or week day for each time unit. 0-24 for "Daily", 1-31 for "Monthly" and 1-7 for "Weekly" (0 = Sunday).
				StartTolerance: The ammount of hours/days/week days the task is allowed to execute if if hasn't executed yet for that time unit.
			-->
			<Schedule Execute="Monthly" StartAt="25" StartTolerance="5"/>
			
			<!-- The message element contains important information about the message scope 
			       ExpireDays: Number of days generated messages are valid.
						 Scope: How the system should generate messages. Values Are "Instance", "Instance|Enterprise", "Instance|User" and "Instance|Enterprise|User" which means the system will generate 
						        one message per Instance, one messages per Instance User, one message per Instance enterprise/company and finally one message per combination of instance, enterprises/companies and users.
			-->
			
			<Message ExpireDays="365" Scope="Instance|Enterprise|User"/>
			
			<!-- The supported platorms element contains a list of all supported platforms. This element is optional. If it does not exist, the topic handler will execute for all product versions detected. -->
			<SupportedPlatforms>
				
				<!-- The supported platorm element contains information about a supported platform
					      Version: Product version to support. Values are V800 and V900
					      platform: Product line to support. Values are "Executive", "Professional" and "Starter"
								EnvironmentTypes: Environment types to support. Values are 0 (Private sector installation), 1 (Private sector SaaS installation), 2 (Public sector installation), 3 (Public sector SaaS installation).
																	Combination of several types is supported by the pipe - '|' character.
				-->
				<SupportedPlatform Version="V100" platform="Executive" EnvironmentTypes="0|1"/>				
				
				<!-- add more supported plaforms as required.-->
			</SupportedPlatforms>
		</Task>
		
		<!-- add more tasks as required-->
	</Tasks>
	
	<!-- The integration config contains all pipeline information for the tasks in this file. Each pipeline has a sequence of handlers and an Id that can be mapped as the entry point for a task execution. 
		   Each handler can have its configuration string, that can contain certain tokens that adapt it to the execution context when they are schedulled for execution.
		       %%InstanceId%% - Identifies the instance the task will be executed on. Ex: V900|Executive|Default
					 %%UserFilter%% - Identifies the user the task will be executed for. Use if message scope contains "User".
					 %%EnterpriseFilter%% - Identifies the company the task will be executed for. Use if message scope contains "Enterprise"
					 %%TenantId%% - Identifies the tenant (license id) The task will be executed for.
					 %%OrganizationId%% - Identifies the organization the task will be executed for.
					 %%TopicId%% and %%TaskId%% - Used to track the topic id and task id the handler is being executed on.
					 
					 For more information, please refer to PRIMAVERA HURAKAN documentation, since all the configurable behavior in this section is supported and limited by HURAKAN features.
	-->
	<IntegrationConfig Version="3.0">
		<Pipelines>
      
      <Pipeline Id="DevelopersNetworkTopicPipeline">
				<Handlers>
					
					<!-- This builtin handler reads all supported ERP instances from the system-->
					<Handler Id="ErpReadConfigHandler" Order="1" Behavior="Reader" Type="Primavera.Hurakan.Handlers.ErpReadConfig" ConfigStr="instanceIdFilter=%%InstanceId%%;userFiltler=%%UserFilter%%;enterpriseFilter=%%EnterpriseFilter%%"/>
					
					<!-- This is the place where the topic handler(s) must be placed -->
					<Handler Id="TemplateHandler" Order="2" Behavior="Reader" Type="Primavera.Bot.DevelopersNetworkTopic.TemplateHandler" ConfigStr="topicId=%%TopicId%%;taskId=%%TaskId%%"/>
					<!-- Add more handlers as required.-->
					
					<!-- This builtin handler commits all messages processed to the database -->
					<Handler Id="SaveBotMessagesHandler" Order="3" Behavior="Reader" Type="Primavera.Hurakan.BotHandlers.SaveBotMessages" ConfigStr=""/>
										
				</Handlers>				
			</Pipeline>
		</Pipelines>
		
		<!-- Add more pipelines as required.-->
	</IntegrationConfig>
</Topic>

<!-- Notes on Topic extensibility - Topic Duplication and Access Lists
 
- This topic can be duplicated which will create a completelly independent topic. Please make sure to map the Config file name to the Topic Id property on the top of this file for correct functionality
  NOTE - New topic config must be placed on the same directory as the original one.

- The pipeline implementation defines the users that will receive the messages generated by this topic. However it may be necessary to include or exclude users without changing the code.
  To do this, create a new "<TopicName>.Custom.Config" file with the following data:
	
<?xml version="1.0" encoding="utf-8" ?>
 <Topic>
	<Tasks>
		<Task Id="CreateNearEnterprisesMessages"> -> Match the task ID here which determines for WHICH task the access list refers to.
			<AccessList>
				<AddUser code="<UserCode>"/> -> Generate this message for <UserCode> also if he won't receive the message otherwise.
				<RemoveUser code="<UserCode>"/> -> Remove the <UserCode> user from the message recipients if he receives this message and must not receive it.
			</AccessList>
		</Task>
	</Tasks>
</Topic>

To have the system implement this behavior the topic handler class must inherir from "TopicHandlerBase" and in the code location where it defines the users that will receive the message, 
call the "ProcessAccessListExceptions" method from the base.

Ex: Inheritance - 
    public class DevelopersNetworkTopic : TopicHandlerBase
		{
		....
		}
		
Ex: Access List implementation
    (view TemplateHandler.cs for more information)


	foreach (User user in myUserList)
	{
	// ... Create messages code
	}
	
	REPLACE WITH:

	List<User> userListAfterACL = this.ProcessAccessListExceptions(instance, myUserList);
  foreach (User user in userListAfterACL)
	{
	// ... Create messages code
	}


-->
